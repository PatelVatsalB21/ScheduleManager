package com.example.schedulemanager.email;import android.app.AlarmManager;import android.app.PendingIntent;import android.content.Context;import android.content.Intent;import android.os.Build;import android.os.Handler;import android.view.Gravity;import android.view.HapticFeedbackConstants;import android.view.LayoutInflater;import android.view.Menu;import android.view.MenuItem;import android.view.View;import android.view.ViewGroup;import android.widget.ImageButton;import android.widget.ImageView;import android.widget.PopupMenu;import android.widget.RelativeLayout;import android.widget.TextView;import android.widget.Toast;import androidx.annotation.NonNull;import androidx.appcompat.app.AppCompatActivity;import androidx.recyclerview.widget.RecyclerView;//import com.example.firebase.HomeFrag.All_Rec_Adapter;//import com.example.firebase.HomeFrag.UtilsArray_All;import com.avatarfirst.avatargenlib.AvatarConstants;import com.avatarfirst.avatargenlib.AvatarGenerator;import com.example.schedulemanager.HomeFrag.UtilsArray_All;import com.example.schedulemanager.MainFragments.Fragment_4;import com.example.schedulemanager.MainFragments.HomePage;import com.example.schedulemanager.R;import com.example.schedulemanager.Setting.Settings_Main;import com.example.schedulemanager.Trash.TrashMainPage;import com.example.schedulemanager.Trash.UtilsArray_Trash;import com.example.schedulemanager.note.PDF_Creator;import com.google.android.material.card.MaterialCardView;import com.google.android.material.snackbar.Snackbar;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Calendar;import static android.content.Context.ALARM_SERVICE;//import static com.example.firebase.email.UtilsArray_Email.myDb;public class Email_rec_Adapter extends RecyclerView.Adapter<Email_rec_Adapter.ViewHolder> {    private static final String EMAIL_ARRAY_DB = "Email_Array_DB";    public static ArrayList<Email> mail;    Context mContext;    Calendar calToday;    public static boolean multiSelect = false;    private ArrayList<Email> selectedItems = new ArrayList<>();    AlarmManager alarmManager;    private String EMAIL_INTENT_DB = "Email_Intent_DB";    private androidx.appcompat.view.ActionMode actionMode;    public Email_rec_Adapter(ArrayList<Email> Mail) {        mail = Mail;    }    @NonNull    @Override    public ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.email_layout, null);        ViewHolder holder = new ViewHolder(view);        mContext = parent.getContext();        calToday = Calendar.getInstance();        return holder;    }    @Override    public void onBindViewHolder(@NonNull final ViewHolder holder, final int position) {        alarmManager = (AlarmManager) mContext.getSystemService(ALARM_SERVICE);        SimpleDateFormat d = new SimpleDateFormat("dd MMM yyyy  hh:mm a");        if (mail.get(position).Scheduled != null) {            if (mail.get(position).Scheduled) {                if (mail.get(position).cal.getTimeInMillis() < System.currentTimeMillis()) {                    holder.email_status_indicator.setImageResource(R.drawable.ic_alarm_pending);                    holder.time.setText("Pending from: "+d.format(mail.get(position).cal.getTimeInMillis()));                } else {                    holder.email_status_indicator.setImageResource(R.drawable.ic_alarm_selected);                    holder.time.setText("Scheduled for: "+d.format(mail.get(position).cal.getTimeInMillis()));                }            } else {                holder.time.setText("Sent at: "+d.format(mail.get(position).cal.getTimeInMillis()));                holder.email_status_indicator.setImageResource(R.drawable.ic_double_done);            }        }        holder.subject.setText(mail.get(position).Subject);        holder.to.setText(mail.get(position).To);        holder.thumbnail.setImageDrawable(AvatarGenerator.Companion.avatarImage(mContext, 50, AvatarConstants.Companion.getCIRCLE(), mail.get(position).To));        holder.card.setCardBackgroundColor(mContext.getResources().getColor(R.color.Violet_bg));        holder.menu_btn.setBackgroundColor(mContext.getResources().getColor(R.color.Violet_bg));//        holder.card.setOnLongClickListener(new View.OnLongClickListener() {//            @Override//            public boolean onLongClick(View view) {//                new AlertDialog.Builder(mContext)//                        .setTitle("Delete Note")//                        .setMessage("Do You Want To Delete Note")//                        .setNegativeButton(android.R.string.no, null)//                        .setPositiveButton(android.R.string.yes, new DialogInterface.OnClickListener() {//                            @Override//                            public void onClick(DialogInterface dialogInterface, int i) {////                                mail.remove(position);////                                UtilsArray_Email.DeleteEmail(position,mContext);//                                notifyDataSetChanged();//                                UtilsArray_All.ReloadCategoryItems();////                                All_In_One_Main_Adapter adapter1 = new All_In_One_Main_Adapter(mContext);////                                adapter1.notifyDataSetChanged();////                            }//                        }).create()//                        .show();////                return true;//            }//        });        holder.card.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                if (multiSelect) {                    selectItem(mail.get(position), holder);                } else {                    if (Settings_Main.App_Password != null && !Settings_Main.App_Password.isEmpty()) {                        Intent intent = new Intent(mContext, Email_Open.class);                        intent.putExtra("position", position);                        mContext.startActivity(intent);                    } else {                        EmailSnackBar();//                        Toast.makeText(mContext, "App Password is not given. Please fill it to use this function.", Toast.LENGTH_SHORT).show();                    }                }            }        });        holder.menu_btn.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(final View v) {//                final String docId = Notes_rec_Adapter.getSnapshots().getSnapshot(i).getId();                if (multiSelect) {                    selectItem(mail.get(position), holder);                } else {                    PopupMenu menu = new PopupMenu(v.getContext(), v);                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {                        menu.setGravity(Gravity.END);                    }                    menu.getMenu().add("Share").setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener() {                        @Override                        public boolean onMenuItemClick(MenuItem item) {                            Intent sendIntent = new Intent();                            sendIntent.setAction(Intent.ACTION_SEND);                            String finalShare = "";                            if (!UtilsArray_Email.getMail().get(position).To.isEmpty())                                finalShare = "To: " + UtilsArray_Email.getMail().get(position).To;                            if (!UtilsArray_Email.getMail().get(position).From.isEmpty())                                finalShare = finalShare + "\n" + "\n" + "From: " + UtilsArray_Email.getMail().get(position).From;                            if (!UtilsArray_Email.getMail().get(position).Subject.isEmpty())                                finalShare = finalShare + "\n" + "\n" + "Subject:" + "\n" + UtilsArray_Email.getMail().get(position).Subject;                            if (!UtilsArray_Email.getMail().get(position).Message.isEmpty())                                finalShare = finalShare + "\n" + "\n" + "Message:" + "\n" + UtilsArray_Email.getMail().get(position).Message;                            sendIntent.putExtra(Intent.EXTRA_TEXT, finalShare);                            sendIntent.setType("text/plain");                            Intent shareIntent = Intent.createChooser(sendIntent, "Share Email");                            mContext.startActivity(shareIntent);                            return false;                        }                    });                    if (mail.get(position).Scheduled) {                        menu.getMenu().add("Cancel Schedule").setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener() {                            @Override                            public boolean onMenuItemClick(MenuItem menuItem) {//                        WorkManager w = WorkManager.getInstance();//                        w.cancelWorkById(UtilsArray_Email.getMail().get(position).WorkId);//                            alarmManager.cancel(UtilsArray_Email.getEmailPendingIntentFromPosition(position));//                            UtilsArray_Email.RemoveFromEmailIntent(mContext,UtilsArray_Email.getCustomPenIntFromPosition(position));                                UtilsArray_Email.CancelEmailAlarm(mContext, position);                                mail.get(position).Scheduled = false;                                return true;                            }                        });                        menu.getMenu().add("Delete").setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener() {                            @Override                            public boolean onMenuItemClick(MenuItem item) {//                        alarmManager.cancel(UtilsArray_Email.getEmailPendingIntentFromPosition(position));                            UtilsArray_Email.RemoveFromEmailIntent(mContext,UtilsArray_Email.getCustomPenIntFromPosition(position));//                        UtilsArray_Email.RemoveFromEmailIntent(mContext,UtilsArray_Email.getCustomPenIntFromPosition(position));                                makeSnackBar(position, mail.get(position));                                UtilsArray_Trash.AddToTrashMail(mail.get(position), mContext);                                UtilsArray_Email.CancelEmailAlarm(mContext, position);                                mail.remove(position);                                UtilsArray_Email.DeleteEmail(position, mContext);                                notifyDataSetChanged();                                UtilsArray_All.ReloadCategoryItems();//                        All_In_One_Main_Adapter adapter1 = new All_In_One_Main_Adapter(mContext);//                        adapter1.notifyDataSetChanged();                                return true;                            }                        });                    } else {                        menu.getMenu().add("Already Sent Want to Delete?").setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener() {                            @Override                            public boolean onMenuItemClick(MenuItem menuItem) {                                mail.remove(position);//                            UtilsArray_Email.RemoveFromEmailIntent(mContext,UtilsArray_Email.getCustomPenIntFromPosition(position));//                            UtilsArray_Email.DeleteEmail(position,mContext);                                notifyDataSetChanged();                                UtilsArray_All.ReloadCategoryItems();//                            All_In_One_Main_Adapter adapter1 = new All_In_One_Main_Adapter(mContext);//                            adapter1.notifyDataSetChanged();                                return true;                            }                        });                    }                    menu.show();                }            }        });        holder.card.setOnLongClickListener(new View.OnLongClickListener() {            @Override            public boolean onLongClick(View view) {                if (!multiSelect) {                    actionMode = ((AppCompatActivity) view.getContext()).startSupportActionMode(actionModeCallbacks);                    view.performHapticFeedback(HapticFeedbackConstants.VIRTUAL_KEY, HapticFeedbackConstants.FLAG_IGNORE_GLOBAL_SETTING);                }                selectItem(mail.get(position), holder);                return true;            }        });        if (selectedItems.contains(mail.get(position))) {            holder.card.setCardBackgroundColor(mContext.getResources().getColor(R.color.color_dark_gray));            holder.menu_btn.setBackgroundColor(mContext.getResources().getColor(R.color.color_dark_gray));        } else {            holder.card.setCardBackgroundColor(mContext.getResources().getColor(R.color.Violet_bg));            holder.menu_btn.setBackgroundColor(mContext.getResources().getColor(R.color.Violet_bg));        }    }    @Override    public int getItemCount() {        if (mail != null && !mail.isEmpty()) {            return mail.size();        } else {            Fragment_4.emailNullViewUpdater(Email_rec_Adapter.this);            return 0;        }    }    public static class ViewHolder extends RecyclerView.ViewHolder {        MaterialCardView card;        TextView time, to, subject;        ImageButton menu_btn;        ImageView thumbnail, email_status_indicator;        public ViewHolder(@NonNull View itemView) {            super(itemView);            time = itemView.findViewById(R.id.email_layout_time);            to = itemView.findViewById(R.id.email_layout_to);            subject = itemView.findViewById(R.id.email_layout_subject);            menu_btn = itemView.findViewById(R.id.email_layout_menu_btn);            thumbnail = itemView.findViewById(R.id.email_layout_thumbnail_img_view);            card = itemView.findViewById(R.id.email_card);            email_status_indicator = itemView.findViewById(R.id.email_layout_status_indicator_view);        }    }    private final androidx.appcompat.view.ActionMode.Callback actionModeCallbacks = new androidx.appcompat.view.ActionMode.Callback() {        @Override        public boolean onCreateActionMode(androidx.appcompat.view.ActionMode actionMode, Menu menu) {            Fragment_4.Frag4ContextHide();            HomePage.hideLayout();            multiSelect = true;            menu.add("Delete");            actionMode.setTitle(selectedItems.size() + " Selected");            return true;        }        @Override        public boolean onPrepareActionMode(androidx.appcompat.view.ActionMode actionMode, Menu menu) {            return false;        }        @Override        public boolean onActionItemClicked(androidx.appcompat.view.ActionMode actionMode, MenuItem item) {            for (Email intItem : selectedItems) {                UtilsArray_Trash.AddToTrashMail(intItem, mContext);                UtilsArray_Email.CancelEmailAlarm(mContext, mail.indexOf(intItem));                mail.remove(intItem);                makeSnackBar();//                Toast.makeText(mContext,"Emails moved to Trash",Toast.LENGTH_SHORT ).show();//                alarmManager.cancel(UtilsArray_Email.getEmailPendingIntentFromPosition(mail.indexOf(intItem)));//                UtilsArray_Email.RemoveFromEmailIntent(mContext,UtilsArray_Email.getCustomPenIntFromPosition(mail.indexOf(intItem)));//                Log.d("NOTESSIZE", String.valueOf(notes.size()));                ;            }            notifyDataSetChanged();            UtilsArray_All.ReloadCategoryItems();//            All_In_One_Main_Adapter adapter1 = new All_In_One_Main_Adapter(mContext);//            adapter1.notifyDataSetChanged();            UtilsArray_Email.UpdateMail(UtilsArray_Email.getMail(), mContext);//            SharedPreferences.Editor editor = EmailsharedPreferences.edit();//            editor.remove(EMAIL_ARRAY_DB);//            editor.remove(EMAIL_INTENT_DB);//            editor.putString(EMAIL_ARRAY_DB, GsonConverter.EmailToJson(mail));//            editor.putString(EMAIL_INTENT_DB, GsonConverter.PenInttoJson(UtilsArraylist.notesPendingIntents));//            editor.commit();//            int deleteData = myDb.deleteData(String.valueOf(2));//            boolean isUpdate = myDb.updateData(String.valueOf(2),GsonConverter.EmailToJson(mail));            actionMode.finish();            return true;        }        @Override        public void onDestroyActionMode(androidx.appcompat.view.ActionMode actionMode) {            HomePage.showLayout();            Fragment_4.Frag4ContextShow();            multiSelect = false;            selectedItems.clear();            notifyDataSetChanged();            UtilsArray_All.ReloadCategoryItems();//            All_In_One_Main_Adapter adapter1 = new All_In_One_Main_Adapter(mContext);//            adapter1.notifyDataSetChanged();        }    };    void selectItem(Email item, ViewHolder holder) {        if (multiSelect) {            if (selectedItems.contains(item)) {//                Log.d("REMOVESELECT",item);                selectedItems.remove(item);                holder.card.setCardBackgroundColor(mContext.getResources().getColor(R.color.Violet_bg));                holder.menu_btn.setBackgroundColor(mContext.getResources().getColor(R.color.Violet_bg));                actionMode.setTitle(selectedItems.size() + " Selected");                if (selectedItems.size() == 0) {                    actionMode.finish();                }            } else {//                Log.d("ADDEDSELECT",item);                if (selectedItems == null) {                    selectedItems = new ArrayList<>();                }                selectedItems.add(item);                holder.card.setCardBackgroundColor(mContext.getResources().getColor(R.color.color_dark_gray));                holder.menu_btn.setBackgroundColor(mContext.getResources().getColor(R.color.color_dark_gray));                actionMode.setTitle(selectedItems.size() + " Selected");            }        }    }    private void makeSnackBar() {        new Handler().postDelayed(new Runnable() {            @Override            public void run() {                Snackbar.make(HomePage.fab_main_home, "Email moved to trash", Snackbar.LENGTH_LONG)                        .setAnchorView(HomePage.fab_main_home)                        .show();            }        }, 750);    }    public void makeSnackBar(Integer positionToRestore, Email emailDeleted) {        Snackbar snackbar = Snackbar                .make(HomePage.fab_main_home, "Email moved to Trash", Snackbar.LENGTH_LONG)                .setAction("UNDO", new View.OnClickListener() {                    @Override                    public void onClick(View view) {                        UtilsArray_Email.mail.add(positionToRestore, emailDeleted);                        UtilsArray_Email.UpdateMail(UtilsArray_Email.getMail(), mContext);                        notifyDataSetChanged();                        Fragment_4.emailNullViewFinish();                        if (emailDeleted.cal != null && emailDeleted.Scheduled && Email.isEmailAheadOfTime(emailDeleted.cal)) {                            AlarmManager alarmManager = (AlarmManager) mContext.getSystemService(ALARM_SERVICE);                            Intent eintent = new Intent(mContext, EmailReceiver.class);                            eintent.putExtra("position", positionToRestore);                            PendingIntent ePendingIntent = PendingIntent.getBroadcast(mContext, (int) emailDeleted.id, eintent, PendingIntent.FLAG_UPDATE_CURRENT);                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {                                alarmManager.setExact(AlarmManager.RTC_WAKEUP, emailDeleted.cal.getTimeInMillis(), ePendingIntent);                            }                        }                        UtilsArray_Trash.trash_mails.remove(emailDeleted);                        UtilsArray_Trash.UpdateTrashMail(UtilsArray_Trash.getTrash_mails(), mContext);                    }                }).setAnchorView(HomePage.fab_main_home);        snackbar.show();    }    public void EmailSnackBar(){        Snackbar.make(HomePage.fab_main_home, "Google App Password is required. Please open Setting", Snackbar.LENGTH_LONG)                .setAnchorView(HomePage.fab_main_home)                .show();    }}