package com.example.schedulemanager.MainFragments;import android.content.Context;import android.graphics.Rect;import android.os.Build;import android.os.Bundle;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.RelativeLayout;import androidx.annotation.NonNull;import androidx.annotation.Nullable;import androidx.annotation.RequiresApi;import androidx.fragment.app.Fragment;import androidx.recyclerview.widget.RecyclerView;import androidx.recyclerview.widget.StaggeredGridLayoutManager;import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;import com.example.schedulemanager.R;import com.example.schedulemanager.note.Notes_rec_Adapter;import com.example.schedulemanager.note.UtilsArraylist;public class Fragment_3 extends Fragment {    static RecyclerView notes_rec_view;    public static SwipeRefreshLayout swp_layout;    Context mContext;    static RelativeLayout null_view;    public static Notes_rec_Adapter adapter;    @RequiresApi(api = Build.VERSION_CODES.JELLY_BEAN_MR1)    @Nullable    @Override    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container,            @Nullable Bundle savedInstanceState) {        final View view = inflater.inflate(R.layout.fragment_3, container, false);        if (mContext == null) {            mContext = container.getContext();        }        notes_rec_view = view.findViewById(R.id.notes_rec_view);        swp_layout = view.findViewById(R.id.Fragment_3_swipe_layout);        null_view = view.findViewById(R.id.No_Notes_View_Rel_Layout);        UtilsArraylist.initNote(mContext);        NotesItemDecoration spacesItemDecoration = new NotesItemDecoration(10);        adapter = new Notes_rec_Adapter(mContext, UtilsArraylist.note);        notes_rec_view.setAdapter(adapter);        notes_rec_view.addItemDecoration(spacesItemDecoration);        notes_rec_view.setLayoutManager(                new StaggeredGridLayoutManager(2, StaggeredGridLayoutManager.VERTICAL));        notes_rec_view.setLayoutDirection(View.LAYOUT_DIRECTION_LTR);        adapter.notifyDataSetChanged();        swp_layout.setOnRefreshListener(() -> {            if (swp_layout.isRefreshing()) {                adapter.notifyDataSetChanged();                swp_layout.setRefreshing(false);            }        });        notes_rec_view.addOnScrollListener(new RecyclerView.OnScrollListener() {            @Override            public void onScrollStateChanged(@NonNull RecyclerView recyclerView, int newState) {                if (newState == RecyclerView.SCROLL_STATE_DRAGGING) {                    HomePage.fab_main_home.hide();                } else {                    if (!HomePage.actionBarOn) {                        HomePage.fab_main_home.show();                    }                }                super.onScrollStateChanged(recyclerView, newState);            }        });        notesNullViewUpdater(adapter);        return view;    }    public static void Frag3ContextHide() {        swp_layout.setEnabled(false);    }    public static void Frag3ContextShow() {        swp_layout.setEnabled(true);    }    public static void notesNullViewUpdater(Notes_rec_Adapter adapter) {        if (UtilsArraylist.note == null || UtilsArraylist.getNote().size() == 0                || adapter.getItemCount() == 0) {            null_view.setVisibility(View.VISIBLE);            notes_rec_view.setVisibility(View.INVISIBLE);        } else {            null_view.setVisibility(View.INVISIBLE);            notes_rec_view.setVisibility(View.VISIBLE);        }    }    public static void noteNullViewFinish() {        if (null_view.getVisibility() == View.VISIBLE) {            null_view.setVisibility(View.INVISIBLE);            notes_rec_view.setVisibility(View.VISIBLE);        }    }    public static class NotesItemDecoration extends RecyclerView.ItemDecoration {        private int space;        public NotesItemDecoration(int space) {            this.space = space;        }        @Override        public void getItemOffsets(Rect outRect, View view, RecyclerView parent,                RecyclerView.State state) {            outRect.left = space;            outRect.right = space;            outRect.bottom = space;            if (parent.getChildAdapterPosition(view) == 0 | parent.getChildAdapterPosition(view)                    == 1) {                outRect.top = space;            }        }    }    @Override    public void onResume() {        super.onResume();        adapter.notifyDataSetChanged();    }}