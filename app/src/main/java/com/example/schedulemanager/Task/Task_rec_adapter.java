package com.example.schedulemanager.Task;import android.content.Context;import android.content.Intent;import android.content.SharedPreferences;import android.graphics.Color;import android.graphics.Paint;import android.os.AsyncTask;import android.os.Handler;import android.util.Log;import android.view.HapticFeedbackConstants;import android.view.LayoutInflater;import android.view.Menu;import android.view.MenuItem;import android.view.View;import android.view.ViewGroup;import android.widget.CheckBox;import android.widget.CompoundButton;import android.widget.LinearLayout;import android.widget.TextView;import android.widget.ToggleButton;import androidx.annotation.NonNull;import androidx.appcompat.app.AppCompatActivity;import androidx.recyclerview.widget.RecyclerView;import com.airbnb.lottie.LottieAnimationView;//import com.example.firebase.HomeFrag.All_Rec_Adapter;//import com.example.firebase.HomeFrag.UtilsArray_All;import com.example.schedulemanager.HomeFrag.UtilsArray_All;import com.example.schedulemanager.MainFragments.Fragment_2;import com.example.schedulemanager.MainFragments.HomePage;import com.example.schedulemanager.R;import com.example.schedulemanager.Trash.UtilsArray_Trash;import com.example.schedulemanager.note.GsonConverter;import com.example.schedulemanager.note.UtilsArraylist;import com.google.android.material.card.MaterialCardView;import com.google.android.material.snackbar.Snackbar;import com.google.common.util.concurrent.Runnables;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Calendar;import nl.dionsegijn.konfetti.KonfettiView;import nl.dionsegijn.konfetti.models.Shape;import nl.dionsegijn.konfetti.models.Size;import static com.example.schedulemanager.Task.UtilsArray_Task.TasksharedPreferences;public class Task_rec_adapter extends RecyclerView.Adapter<Task_rec_adapter.ViewHolder> {    private static final String TASK_ARRAY_DB = "Task_Array_DB";    Context mContext;    ArrayList<Task> task = new ArrayList<>();    public static boolean multiSelect = false;    private ArrayList<Task> selectedItems = new ArrayList<>();    private androidx.appcompat.view.ActionMode actionMode;    public Task_rec_adapter(ArrayList<Task> T) {        task = T;    }    @NonNull    @Override    public ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.task_layout, null);        ViewHolder holder = new ViewHolder(view);        mContext = parent.getContext();        return holder;    }    @Override    public void onBindViewHolder(@NonNull final ViewHolder holder, final int position) {//            LottieLoader loader = new LottieLoader(holder,position);//            loader.execute();        holder.lottieAnimationView.setAnimation(UtilsArray_Task.category.get(task.get(position).LottieFileRes).LottieRes);        if (task.get(position).isRepeating) holder.weekDaysLayout.setVisibility(View.VISIBLE);        else holder.weekDaysLayout.setVisibility(View.GONE);        holder.sun.setChecked(task.get(position).weekDays.get(0));        holder.mon.setChecked(task.get(position).weekDays.get(1));        holder.tue.setChecked(task.get(position).weekDays.get(2));        holder.wed.setChecked(task.get(position).weekDays.get(3));        holder.thu.setChecked(task.get(position).weekDays.get(4));        holder.fri.setChecked(task.get(position).weekDays.get(5));        holder.sat.setChecked(task.get(position).weekDays.get(6));        holder.title.setText(task.get(position).Title);//        holder.desc.setText(task.get(position).Desc);        SimpleDateFormat d = new SimpleDateFormat(" dd MMM yyyy hh:mm a");        SimpleDateFormat dShort = new SimpleDateFormat(" dd MMM yyyy");        holder.card.setCardBackgroundColor(mContext.getResources().getColor(R.color.taskBG));        if (task.get(position).isComplete) {            holder.taskCheckBox.setChecked(true);            holder.title.setPaintFlags(holder.title.getPaintFlags() | Paint.STRIKE_THRU_TEXT_FLAG);            holder.title.setTextColor(mContext.getResources().getColor(R.color.Blue_new_dull_txt));            holder.time.setTextColor(mContext.getResources().getColor(R.color.Blue_new_dull_txt));            holder.card.setCardBackgroundColor(mContext.getResources().getColor(R.color.Blue_new_dull_bg));            if (task.get(position).finishTime!=null) {                holder.time.setText("Task completed on: " + dShort.format(task.get(position).finishTime.getTimeInMillis()));            }else {                holder.time.setText("Task completed ");            }        } else {            holder.taskCheckBox.setChecked(false);            holder.title.setPaintFlags(holder.title.getPaintFlags() & (~Paint.STRIKE_THRU_TEXT_FLAG));            holder.title.setTextColor(mContext.getResources().getColor(R.color.Blue_new_txt));            holder.time.setTextColor(mContext.getResources().getColor(R.color.Blue_new_txt));            holder.card.setCardBackgroundColor(mContext.getResources().getColor(R.color.Blue_new_bg));            holder.time.setText("Will remind on: " + d.format(task.get(position).calendar.getTimeInMillis()));        }        holder.card.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                if (multiSelect) {                    selectItem(task.get(position), holder);                } else {                    Intent i = new Intent(mContext, TaskOpen.class);                    i.putExtra("position", position);                    mContext.startActivity(i);                }            }        });//        holder.card.setOnLongClickListener(new View.OnLongClickListener() {//            @Override//            public boolean onLongClick(View view) {//                new AlertDialog.Builder(mContext)//                        .setTitle("Delete Note")//                        .setMessage("Do You Want To Delete Note")//                        .setNegativeButton(android.R.string.no, null)//                        .setPositiveButton(android.R.string.yes, new DialogInterface.OnClickListener() {//                            @Override//                            public void onClick(DialogInterface dialogInterface, int i) {//                                task.remove(position);//                                notifyItemRemoved(position);//                                notifyDataSetChanged();//                                All_Rec_Adapter adapter1 = new All_Rec_Adapter(mContext, UtilsArray_All.getAllItemsArrayList());//                                adapter1.notifyDataSetChanged();////                                SharedPreferences.Editor editor =  TasksharedPreferences.edit();//                                editor.remove(TASK_ARRAY_DB);//                                editor.putString( TASK_ARRAY_DB , TaskToJson(task));//                                editor.commit();////////                            }//                        }).create()//                        .show();////                return true;//            }//        });        holder.taskCheckBox.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {            @Override            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {                if (multiSelect) {                    selectItem(task.get(position), holder);                    holder.taskCheckBox.setChecked(task.get(position).isComplete);                } else {                    if (b) {                        HomePage.konfettiView.setVisibility(View.VISIBLE);                        HomePage.konfettiView1.setVisibility(View.VISIBLE);                        UtilsArray_Task.CancelTaskAlarm(mContext, position);                        task.get(position).isComplete = true;                        task.get(position).finishTime = Calendar.getInstance();                        holder.taskCheckBox.setChecked(true);                        holder.title.setPaintFlags(holder.title.getPaintFlags() | Paint.STRIKE_THRU_TEXT_FLAG);                        holder.title.setTextColor(mContext.getResources().getColor(R.color.Blue_new_dull_txt));                        holder.time.setTextColor(mContext.getResources().getColor(R.color.Blue_new_dull_txt));                        holder.card.setCardBackgroundColor(mContext.getResources().getColor(R.color.Blue_new_dull_bg));//                    task.get(position).calendar.setTimeInMillis(System.currentTimeMillis());                        holder.time.setText("Task completed on: " + dShort.format(task.get(position).finishTime.getTimeInMillis()));                        Log.e("Konfetti", "Called");//                        HomePage.konfettiView.build()//                                .addColors(Color.YELLOW, Color.GREEN, Color.MAGENTA)//                                .addColors(UtilsArraylist.note_BG_colorSet)//                                .setDirection(0.0, 359.0)//                                .setSpeed(1f, 4f)//                                .setFadeOutEnabled(true)//                                .setTimeToLive(3000L)//                                .addShapes(Shape.Square.INSTANCE, Shape.Circle.INSTANCE)//                                .addSizes(new Size(6, 5f), new Size(8, 6f))//                                .setPosition(0, 30)//                                .burst(600);////                        HomePage.konfettiView1.build()//                                .addColors(Color.YELLOW, Color.GREEN, Color.MAGENTA)//                                .addColors(UtilsArraylist.note_BG_colorSet)//                                .setDirection(0.0, 359.0)//                                .setSpeed(1f, 4f)//                                .setFadeOutEnabled(true)//                                .setTimeToLive(3000L)//                                .addShapes(Shape.Square.INSTANCE, Shape.Circle.INSTANCE)//                                .addSizes(new Size(6, 5f), new Size(8, 6f))//                                .setPosition(HomePage.konfettiView1.getWidth(), 30)//                                .burst(600);                        new Handler().post(new Runnable() {                            @Override                            public void run() {                                HomePage.konfettiView.build()                                        .addColors(Color.YELLOW, Color.GREEN, Color.MAGENTA)                                        .addColors(UtilsArraylist.note_BG_colorSet)                                        .setDirection(0.0, 359.0)                                        .setSpeed(1f, 4f)                                        .setFadeOutEnabled(true)                                        .setTimeToLive(3000L)                                        .addShapes(Shape.Square.INSTANCE, Shape.Circle.INSTANCE)                                        .addSizes(new Size(6, 5f), new Size(8, 6f))                                        .setPosition(0, 30)                                        .burst(600);                                HomePage.konfettiView1.build()                                        .addColors(Color.YELLOW, Color.GREEN, Color.MAGENTA)                                        .addColors(UtilsArraylist.note_BG_colorSet)                                        .setDirection(0.0, 359.0)                                        .setSpeed(1f, 4f)                                        .setFadeOutEnabled(true)                                        .setTimeToLive(3000L)                                        .addShapes(Shape.Square.INSTANCE, Shape.Circle.INSTANCE)                                        .addSizes(new Size(6, 5f), new Size(8, 6f))                                        .setPosition(HomePage.konfettiView1.getWidth(), 30)                                        .burst(600);                            }                        });//                        KonfettiPlayer konfettiPlayer = new KonfettiPlayer();//                        konfettiPlayer.execute();//                        new Handler().postDelayed(new Runnable() {//                            @Override//                            public void run() {//                                HomePage.konfettiView.setVisibility(View.GONE);//                                HomePage.konfettiView1.setVisibility(View.GONE);//                            }//                        }, 10000);                    } else {                        if (Task.isTaskAheadOfTime(task.get(position).calendar) || task.get(position).isRepeating) {                            UtilsArray_Task.ResetTaskAlarms(mContext, position);                            task.get(position).isComplete = false;                            holder.taskCheckBox.setChecked(false);                            holder.title.setPaintFlags(holder.title.getPaintFlags() & (~Paint.STRIKE_THRU_TEXT_FLAG));                            holder.title.setTextColor(mContext.getResources().getColor(R.color.Blue_new_txt));                            holder.time.setTextColor(mContext.getResources().getColor(R.color.Blue_new_txt));                            holder.card.setCardBackgroundColor(mContext.getResources().getColor(R.color.Blue_new_bg));                            if (task.get(position).calendar.getTimeInMillis() < System.currentTimeMillis() + 10000) {                                task.get(position).calendar.setTimeInMillis(Task.getTimeToWeeklyRings(task.get(position)).get(0));                            }                            holder.time.setText("Will remind on: " + d.format(task.get(position).calendar.getTimeInMillis()));                        } else {                            makeCustomSnackBar("Please edit time of task");//                            Toast.makeText(mContext, "Please edit time of task", Toast.LENGTH_SHORT).show();                            holder.taskCheckBox.setChecked(true);                        }                    }                    SharedPreferences.Editor editor = TasksharedPreferences.edit();                    editor.remove(TASK_ARRAY_DB);                    editor.putString(TASK_ARRAY_DB, GsonConverter.TaskToJson(task));                    editor.commit();                    UtilsArray_Task.initTask(mContext);                    UtilsArray_All.ReloadCategoryItems();                }            }        });        holder.card.setOnLongClickListener(new View.OnLongClickListener() {            @Override            public boolean onLongClick(View view) {                if (!multiSelect) {                    actionMode = ((AppCompatActivity) view.getContext()).startSupportActionMode(actionModeCallbacks);                    view.performHapticFeedback(HapticFeedbackConstants.VIRTUAL_KEY, HapticFeedbackConstants.FLAG_IGNORE_GLOBAL_SETTING);                }                selectItem(task.get(position), holder);                return true;            }        });        if (selectedItems.contains(task.get(position))) {            holder.card.setCardBackgroundColor(mContext.getResources().getColor(R.color.color_dark_gray));        } else {            if (task.get(position).isComplete) {                holder.card.setCardBackgroundColor(mContext.getResources().getColor(R.color.Blue_new_dull_bg));            } else                holder.card.setCardBackgroundColor(mContext.getResources().getColor(R.color.Blue_new_bg));        }    }    @Override    public int getItemCount() {        if (task != null && !task.isEmpty()) {            return task.size();        } else {            Fragment_2.taskNullViewCreate();            return 0;        }    }    public class ViewHolder extends RecyclerView.ViewHolder {        MaterialCardView card;        TextView title, time;        //        Button delete_task;        LottieAnimationView lottieAnimationView;        ToggleButton sun, mon, tue, wed, thu, fri, sat;        CheckBox taskCheckBox;        LinearLayout weekDaysLayout;        public ViewHolder(@NonNull View itemView) {            super(itemView);            title = itemView.findViewById(R.id.task_title_layout);            time = itemView.findViewById(R.id.task_time_layout);//            desc = itemView.findViewById(R.id.task_desc_layout);//            delete_task = itemView.findViewById(R.id.task_btn_delete);            card = itemView.findViewById(R.id.task_card_layout_for_color);            lottieAnimationView = itemView.findViewById(R.id.task_layout_lottie_view);            lottieAnimationView.enableMergePathsForKitKatAndAbove(true);            sun = itemView.findViewById(R.id.task_layout_sun);            mon = itemView.findViewById(R.id.task_layout_mon);            tue = itemView.findViewById(R.id.task_layout_tue);            wed = itemView.findViewById(R.id.task_layout_wed);            thu = itemView.findViewById(R.id.task_layout_thu);            fri = itemView.findViewById(R.id.task_layout_fri);            sat = itemView.findViewById(R.id.task_layout_sat);            taskCheckBox = itemView.findViewById(R.id.task_layout_checkBox);            weekDaysLayout = itemView.findViewById(R.id.task_layout_weekDays_lin_layout);        }    }    public androidx.appcompat.view.ActionMode.Callback actionModeCallbacks = new androidx.appcompat.view.ActionMode.Callback() {        @Override        public boolean onCreateActionMode(androidx.appcompat.view.ActionMode actionMode, Menu menu) {            HomePage.hideLayout();            Fragment_2.Frag2ContextHide();            multiSelect = true;            menu.add("Delete");            actionMode.setTitle(selectedItems.size() + " Selected");            return true;        }        @Override        public boolean onPrepareActionMode(androidx.appcompat.view.ActionMode actionMode, Menu menu) {            return false;        }        @Override        public boolean onActionItemClicked(androidx.appcompat.view.ActionMode actionMode, MenuItem item) {//            Log.d("NOTESSIZE", String.valueOf(task.size()));            for (Task intItem : selectedItems) {//                Log.d("NOTESRECADAPTER",intItem.toString());                UtilsArray_Trash.AddToTrashTasks(intItem, mContext);                UtilsArray_Task.CancelTaskAlarm(mContext, UtilsArray_Task.task.indexOf(intItem));                task.remove(intItem);                makeSnackBar();//                Toast.makeText(mContext,"Tasks moved to Trash",Toast.LENGTH_SHORT ).show();//            alarmManager.cancel(UtilsArray_Task.getTaskPendingIntentFromPosition(task.indexOf(intItem)));//            UtilsArray_Task.RemoveFromTaskIntent(mContext,getCustomPenIntFromPosition(task.indexOf(intItem)));//                Log.d("NOTESSIZE", String.valueOf(notes.size()));            }            notifyDataSetChanged();            UtilsArray_All.ReloadCategoryItems();//            All_In_One_Main_Adapter adapter1 = new All_In_One_Main_Adapter(mContext);//            adapter1.notifyDataSetChanged();            SharedPreferences.Editor editor = TasksharedPreferences.edit();            editor.remove(TASK_ARRAY_DB);            editor.putString(TASK_ARRAY_DB, GsonConverter.TaskToJson(task));            editor.commit();            UtilsArray_Task.initTask(mContext);//            int deleteData = myDb.deleteData(String.valueOf(0));//            boolean isUpdate = myDb.updateData(String.valueOf(0),GsonConverter.TaskToJson(task));            actionMode.finish();            return true;        }        @Override        public void onDestroyActionMode(androidx.appcompat.view.ActionMode actionMode) {            HomePage.showLayout();            Fragment_2.Frag2ContextShow();            multiSelect = false;            selectedItems.clear();            notifyDataSetChanged();            UtilsArray_All.ReloadCategoryItems();//            All_In_One_Main_Adapter adapter1 = new All_In_One_Main_Adapter(mContext);//            adapter1.notifyDataSetChanged();        }    };    private void makeSnackBar() {        new Handler().postDelayed(new Runnable() {            @Override            public void run() {                Snackbar.make(HomePage.fab_main_home, "Task moved to trash", Snackbar.LENGTH_SHORT)                        .setAnchorView(HomePage.fab_main_home)                        .show();            }        }, 750);    }    public void makeCustomSnackBar(String message){        Snackbar.make(HomePage.fab_main_home, message, Snackbar.LENGTH_SHORT)                .setAnchorView(HomePage.fab_main_home)                .show();    }    void selectItem(Task item, ViewHolder holder) {        if (multiSelect) {            if (selectedItems.contains(item)) {                Log.d("REMOVESELECT", item.getTitle());                if (task.get(task.indexOf(item)).isComplete) {                    holder.card.setCardBackgroundColor(mContext.getResources().getColor(R.color.Blue_new_dull_bg));                } else                    holder.card.setCardBackgroundColor(mContext.getResources().getColor(R.color.Blue_new_bg));                selectedItems.remove(item);                actionMode.setTitle(selectedItems.size() + " Selected");                if (selectedItems.size() == 0) {                    actionMode.finish();                }            } else {                if (selectedItems == null) {                    selectedItems = new ArrayList<>();                }                Log.d("ADDEDSELECT", item.getTitle());                selectedItems.add(item);                holder.card.setCardBackgroundColor(mContext.getResources().getColor(R.color.color_dark_gray));                actionMode.setTitle(selectedItems.size() + " Selected");            }        }    }//    public void makeSnackBar(Integer positionToRestore, Task taskDeleted){////        Snackbar snackbar = Snackbar//                .make(HomePage.fab_main_home, "Task deleted successfully", Snackbar.LENGTH_LONG)//                .setAction("UNDO", new View.OnClickListener() {//                    @Override//                    public void onClick(View view) {//                        UtilsArray_Task.task.add(positionToRestore,taskDeleted);//                        UtilsArray_Task.UpdateTask(UtilsArray_Task.getTask(),mContext);//                        notifyDataSetChanged();//                        Fragment_2.taskNullViewFinish();////                        if (!taskDeleted.isComplete && taskDeleted.calendar != null && Task.isTaskAheadOfTime(taskDeleted.calendar)){//                            AlarmManager alarmManager = (AlarmManager) mContext.getSystemService(Context.ALARM_SERVICE);//                            Intent tintent = new Intent(mContext, TaskReceiver.class);//                            tintent.putExtra("position", positionToRestore);//                            PendingIntent tPendingIntent = PendingIntent.getBroadcast(mContext, (int) taskDeleted.id, tintent, PendingIntent.FLAG_UPDATE_CURRENT);////                            if (taskDeleted.isRepeating) {////                                List<Long> timeToWeeklyRings = Task.getTimeToWeeklyRings(taskDeleted);//                                for (long millis : timeToWeeklyRings) {//                                    alarmManager.setRepeating(AlarmManager.RTC_WAKEUP, millis, AlarmManager.INTERVAL_DAY * 7, tPendingIntent);//                                }//                            } else {//                                alarmManager.setRepeating(AlarmManager.RTC_WAKEUP, Task.getTimeToNextRing(taskDeleted.calendar), AlarmManager.INTERVAL_DAY * 7, tPendingIntent);//                            }////                        }////                    }//                }).setAnchorView(HomePage.fab_main_home);////        snackbar.show();////    }//    public class KonfettiPlayer extends AsyncTask{////        @Override//        protected Object doInBackground(Object[] objects) {//            HomePage.konfettiView.build()//                    .addColors(Color.YELLOW, Color.GREEN, Color.MAGENTA)//                    .addColors(UtilsArraylist.note_BG_colorSet)//                    .setDirection(0.0, 359.0)//                    .setSpeed(1f, 4f)//                    .setFadeOutEnabled(true)//                    .setTimeToLive(3000L)//                    .addShapes(Shape.Square.INSTANCE, Shape.Circle.INSTANCE)//                    .addSizes(new Size(6, 5f), new Size(8, 6f))//                    .setPosition(0, 30)//                    .burst(600);////            HomePage.konfettiView1.build()//                    .addColors(Color.YELLOW, Color.GREEN, Color.MAGENTA)//                    .addColors(UtilsArraylist.note_BG_colorSet)//                    .setDirection(0.0, 359.0)//                    .setSpeed(1f, 4f)//                    .setFadeOutEnabled(true)//                    .setTimeToLive(3000L)//                    .addShapes(Shape.Square.INSTANCE, Shape.Circle.INSTANCE)//                    .addSizes(new Size(6, 5f), new Size(8, 6f))//                    .setPosition(HomePage.konfettiView1.getWidth(), 30)//                    .burst(600);//            return null;//        }//    }//    public class LottieLoader extends AsyncTask{//        ViewHolder holder;//        Integer position;////        public LottieLoader(ViewHolder viewHolder,Integer i) {//        holder = viewHolder;//        position = i;//        }//        @Override//        protected Object doInBackground(Object[] objects) {//            if (holder!=null){//                holder.lottieAnimationView.setAnimation(UtilsArray_Task.category.get(task.get(position).LottieFileRes).LottieRes);//            }//            return null;//        }//    }}